#+TITLE: slang - S-Expression languages frontend
#+AUTHOR: kostdani
#+EMAIL: kostdani@mail.com

#+DESCRIPTION: Compiler frontend for S-Expression languages tageting LLVM IR
#+HOMEPAGE: https://github.com/kostdani/slang
#+KEYWORDS: llvm, s-expression, compiler, scheme, lisp, c
#+LANGUAGE: en
#+LICENSE: MIT

#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :comments both
#+PROPERTY: header-args :exports both

* Introduction

Slang is a compiler frontend for S-Expression languages targeting LLVM IR. It
is written in C and uses LLVM C API. It is designed to be used as a CLI tool.

* SEIR

SEIR stands for S-Expression Intermediate Representation. It is designed
to have s-expression syntax and as close to LLVM IR semantics as possible.
It is not intended to be used directly, but rather as a target language for
other S-Expression languages which they can be transformed to using macros.
Something liek assembly of lisps.

** Src
*** AST
:PROPERTIES:
:HEADER-ARGS: :tangle src/ast.h  :comments both :exports both :mkdirp yes
:END:

Abstract syntax tree is maximally simplified. There are 2 types of nodes:
- LIST - list of nodes
- ATOM - atom node (leaf) storing a string
  
#+BEGIN_SRC C
  #pragma once
  #include <stdio.h>
  #include <string.h>
  #include <malloc.h>

  typedef struct s_expr{
      enum{
          LIST,
          ATOM
      } type;
      void * ptr;
  } SExpr;

  void free_sexpr(SExpr sexp){
      if(sexp.type==LIST)
          for (SExpr *i = (SExpr *) sexp.ptr; i->ptr; i++)
              free_sexpr(*i);
      if(sexp.ptr)
          free(sexp.ptr);
  }
  
  #define atomeq(atom, str) (atom.type==ATOM && !strcmp(str,(char *)atom.ptr))
#+END_SRC

**** Printing

Printing function is simple and prints the AST in a human readable form.

#+BEGIN_SRC C 
  void print_sexpr(SExpr sexp){
      if(sexp.type==ATOM)
          printf("%s",(char *)sexp.ptr);
      else if(sexp.type==LIST) {
          printf("(");
          for (SExpr *i = (SExpr *) sexp.ptr; i->ptr; i++) {
              if(i!=sexp.ptr)
                  printf(" ");
              print_sexpr(*i);
          }
          printf(")");
      }
  }
  void prints(SExpr sexp){
      print_sexpr(sexp);
      printf("\n");
  }
#+END_SRC

*** Parser
:PROPERTIES:
:HEADER-ARGS: :tangle src/parser.c :comments both :exports both :mkdirp yes
:END:

Parser is implemented using recursive descent parser. It is as simple as
possible and does not support any error recovery. It should be able to parse correct
programs, but it is not guaranteed to parse incorrect programs.

Context free grammar used to implement parser:
#+BEGIN_SRC C
  #include <wctype.h>
  #include "ast.h"

  SExpr parse_expr(char ** str);
  SExpr parse_list(char ** str);
  SExpr parse_atom(char ** str);
  SExpr parse(char *s){
      size_t l=strlen(s);
      char *ostr=(char *)malloc(l+1);
      char *str=ostr;
      strcpy(str,s);
      str[l]=0;
      SExpr ast= parse_expr(&str);
      free(ostr);
      return ast;
  }

  #define LISP(str) parse(#str)
#+END_SRC
  - Expression = Atom | List
#+BEGIN_SRC C
  SExpr parse_expr(char ** str){
      for(;iswspace(**str);(*str)++);
      if(**str=='(')
          return parse_list(str);
      else
          return parse_atom(str);
  }
#+END_SRC
  - Atom = string | symbol
    - string = '"' {any character except '"' } | '\\' {any character} '"'
    - symbol = {any character except '(', ')', ' ', '\t', '\n', '\r'}
#+BEGIN_SRC C
  SExpr parse_atom(char ** str){
      size_t i;
      SExpr atom;
      atom.type=ATOM;
      switch (**str) {
      case '"':
          for(i=1;(*str)[i]!='"';i++)
              if((*str)[i]=='\\')
                  i++;
          i++;
          atom.ptr=malloc(i+1);
          strncpy((char *)atom.ptr,*str,i);
          ((char *)atom.ptr)[i]=0;
          (*str)+=i;
          return atom;
      default:
          for (i=0; !iswspace((*str)[i])&&(*str)[i]!=')'&&(*str)[i]!='('; i++);
          atom.ptr=malloc(i+1);
          strncpy((char *)atom.ptr,*str,i);
          ((char *)atom.ptr)[i]=0;
          (*str)+=i;
          return atom;
      }
  }
#+END_SRC
  List = "(" Expression* ")"
#+BEGIN_SRC C
  SExpr parse_list(char **str){
      (*str)++;
      SExpr list;
      list.type=LIST;
      size_t a_len=0;
      size_t m_len=1;
      list.ptr= malloc(m_len*sizeof(SExpr)+1);
      while(1){
          for(;iswspace(**str);(*str)++);
          if(**str==')'){
              (*str)++;
              SExpr nil;
              nil.type=LIST;
              nil.ptr=0;
              ((SExpr *)list.ptr)[a_len]=nil;
              return list;
          }
          ((SExpr *)list.ptr)[a_len]= parse_expr(str);
          a_len++;
          if(a_len==m_len){
              m_len*=2;
              list.ptr= realloc(list.ptr,m_len*sizeof(SExpr)+1);
          }
      }
  }
#+END_SRC

*** Environment
:PROPERTIES:
:HEADER-ARGS: :tangle src/env.h :comments both :exports both :mkdirp yes
:END:

Environment is implemented as a linked list of name and value pairs. It is
possible to define new variables and functions in the environment. It is also
possible to lookup variables and functions in the environment.

#+BEGIN_SRC C
  #pragma once
  #include <llvm-c/Core.h>
  #include <malloc.h>
  #include <string.h>

  typedef struct env{
      char *name;
      LLVMValueRef value;
      struct env *next;
  } Env;

  Env *global_env=0;

  void add_var(char *name,LLVMValueRef value){
      Env *e=(Env *)malloc(sizeof(Env));
      e->name=name;
      e->value=value;
      e->next=global_env;
      global_env=e;
  }

  LLVMValueRef get_var(char *name){
      for(Env *e=global_env;e;e=e->next)
          if(!strcmp(e->name,name))
              return e->value;
      return 0;
  }

  void free_env(){
      for(Env *e=global_env;e;e=e->next)
          free(e);
  }
#+END_SRC

*** Compiler
:PROPERTIES:
:HEADER-ARGS: :tangle src/compiler.c :comments both :exports both :mkdirp yes
:END:

Compiler is implemented using LLVM C API. It is not very efficient, but it is
easy to use and understand. The goal is to bootstrap the compiler, better compiler
will be implemented later in compiled language itself.

#+BEGIN_SRC C
  #include <llvm-c/Core.h>
  #include <llvm-c/ExecutionEngine.h>
  #include <llvm-c/Target.h>
  #include <llvm-c/Analysis.h>
  #include <llvm-c/BitWriter.h>
  #include <ctype.h>
  #include <stdlib.h>
  #include <string.h>
  #include "ast.h"
  #include "env.h"
#+END_SRC

**** Types

compile type takes SExpr and returns LLVMTypeRef
if SExpr is atom calls compile_atomic_type if SExpr is list calls compile_compound_type

#+BEGIN_SRC C
  LLVMTypeRef compile_atomic_type(SExpr type);
  LLVMTypeRef compile_compound_type(SExpr* type);
  LLVMTypeRef compile_type(SExpr sexp){
      if(sexp.type==ATOM)
          return compile_atomic_type(sexp);
      else if(sexp.type==LIST)
          return compile_compound_type((SExpr *)sexp.ptr);
      return NULL;
  }
#+END_SRC

***** supprted atomic types

atomic type is stored as pair of name and LLVMTypeRef

#+BEGIN_SRC C
  struct{
      char *name;
       LLVMTypeRef (*fn)();
  } types[]={
      {"<i8>",LLVMInt8Type},
      {"<i16>",LLVMInt16Type},
      {"<i32>",LLVMInt32Type},
      {"<i64>",LLVMInt64Type},
      {"<f32>",LLVMFloatType},
      {"<f64>",LLVMDoubleType},
      {"<void>",LLVMVoidType},
      {0,0}
  };
  LLVMTypeRef compile_atomic_type(SExpr sexp){
      for(int i=0;types[i].name;i++)
          if(atomeq(sexp,types[i].name))
              return types[i].fn();
      return 0;
  }
#+END_SRC

***** supported compound types

compound types are stored as pair of name and function that takes list of SExpr and returns LLVMTypeRef

#+BEGIN_SRC C
  LLVMTypeRef compile_ptr(SExpr* list);
  LLVMTypeRef compile_fn(SExpr* list);
  struct{
      char *name;
      LLVMTypeRef (*fn)(SExpr *);
  } compound_types[]={
      {"<ptr>",compile_ptr},
      {"<fn>",compile_fn},
      {0,0}
  };
  LLVMTypeRef compile_compound_type(SExpr* list){
      for(int i=0;compound_types[i].name;i++)
          if(atomeq(list[0],compound_types[i].name))
              return compound_types[i].fn(list);
      return 0;
  }
#+END_SRC

****** pointer type

pointers are defined as list of two elements: first element is name of pointer type, second element is type of pointer
(<ptr> <type>)
(<ptr>) stands for (<ptr> <void>)

#+BEGIN_SRC C
  LLVMTypeRef compile_ptr(SExpr* list){
        if(list[1].ptr==0)
            return LLVMPointerType(LLVMVoidType(),0);
        LLVMTypeRef t=compile_type(list[1]);
        if(!t)
            t=LLVMVoidType();
        return LLVMPointerType(t,0);
    }
#+END_SRC

****** function type

functions are defined as list of two or more elements: first element is name of function type, second element is return type of function, rest of elements are types of arguments
(<fn> <return type> <arg1 type> <arg2 type> ...)
(<fn>) stands for (<fn> <void>)

#+BEGIN_SRC C
  LLVMTypeRef compile_fn(SExpr* list){
        LLVMTypeRef ret=compile_type(list[1]);
        if(!ret)
            return LLVMFunctionType(LLVMVoidType(),0,0,0);
        LLVMTypeRef *args=0;
        size_t argn;
        for(argn=0;list[argn+2].ptr;argn++);
        args=malloc(argn*sizeof(LLVMTypeRef));
        for(size_t i=0;i<argn;i++)
            args[i]=compile_type(list[i+2]);
        LLVMTypeRef fn=LLVMFunctionType(ret,args,argn,0);
        free(args);
        return fn;
    }
#+END_SRC

**** Values

Values are either numbers, strings, or symbols.
numbers or compiled to LLVM constants, strings are compiled to LLVM global strings, and are looked up in the environment.

#+BEGIN_SRC C
  LLVMValueRef compile_value(SExpr sexp){
      if(sexp.type==ATOM){
          if(isdigit(*(char *)sexp.ptr))
              return LLVMConstInt(LLVMInt32Type(),atoi((char *)sexp.ptr),0);
          else if(*(char *)sexp.ptr=='"')
              return LLVMConstString((char *)sexp.ptr+1,strlen((char *)sexp.ptr)-2,0);
          else
              return get_var((char *)sexp.ptr);
      }
      printf("unknown value: \n");
      prints(sexp);
      return 0;
  }
#+END_SRC

**** Instructions

instruction compiler functions are named compile_<instruction>
implemented as functions that take a pointer to builder and a pointer to the instruction list and return a pointer to the last instruction

#+BEGIN_SRC C
  LLVMValueRef compile_ret(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_br(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_add(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_sub(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_mul(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_sdiv(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_udiv(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_call(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_store(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_load(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_phi(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_cast(LLVMBuilderRef builder,SExpr* sexp);
  LLVMValueRef compile_assign(LLVMBuilderRef builder,SExpr* sexp);
  struct instruction{
      char *name;
      LLVMValueRef (*compile)(LLVMBuilderRef,SExpr*);
  }   instructions[]={
      {"ret",compile_ret},
      {"br",compile_br},
      {"add",compile_add},
      {"sub",compile_sub},
      {"mul",compile_mul},
      {"sdiv",compile_sdiv},
      {"udiv",compile_udiv},
      {"call",compile_call},
      {"store",compile_store},
      {"load",compile_load},
      {"phi",compile_phi},
      {"cast",compile_cast},
      {"assign",compile_assign},
      {0,0}
  };
  LLVMValueRef compile_instr(LLVMBuilderRef builder,SExpr* sexp){
      for(size_t i=0;instructions[i].name;i++)
          if(!strcmp(sexp[0].ptr,instructions[i].name))
              return instructions[i].compile(builder,sexp);
      return 0;
  }
#+END_SRC

***** Return

syntax: (ret value) or (ret) for void

#+BEGIN_SRC C 
  LLVMValueRef compile_ret(LLVMBuilderRef builder,SExpr *sexp){
      if(sexp[1].ptr==0)
          return LLVMBuildRetVoid(builder);
      else
          return LLVMBuildRet(builder,compile_value(sexp[1]));
  }
#+END_SRC

***** Branch

syntax: (br cond label1 label2) or (br label) for unconditional branch

#+BEGIN_SRC C 
  LLVMValueRef compile_br(LLVMBuilderRef builder,SExpr* sexp){
      if(sexp[3].ptr)
          return LLVMBuildCondBr(builder,compile_value(sexp[1]),
                                 (LLVMBasicBlockRef)compile_value(sexp[2]),
                                 (LLVMBasicBlockRef)compile_value(sexp[3]));
      else
          return LLVMBuildBr(builder,(LLVMBasicBlockRef)compile_value(sexp[1]));
  }
#+END_SRC

***** Add

syntax: (add value1 value2)

#+BEGIN_SRC C 
  LLVMValueRef compile_add(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildAdd(builder,compile_value(sexp[2]),
                                 compile_value(sexp[3]),
                                 (char *)sexp[0].ptr);
  }
#+END_SRC

***** Sub

syntax: (sub value1 value2)

#+BEGIN_SRC C 
  LLVMValueRef compile_sub(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildSub(builder,compile_value(sexp[1]),
                                 compile_value(sexp[2]),
                                 (char *)sexp[0].ptr);
  }
#+END_SRC

***** Mul

syntax: (mul value1 value2)

#+BEGIN_SRC C
  LLVMValueRef compile_mul(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildMul(builder,compile_value(sexp[1]),
                                 compile_value(sexp[2]),
                                 (char *)sexp[0].ptr);
  }
#+END_SRC

***** Signed Div

syntax: (sdiv value1 value2)

#+BEGIN_SRC C 
  LLVMValueRef compile_sdiv(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildSDiv(builder,compile_value(sexp[1]),
                                 compile_value(sexp[2]),
                                 (char *)sexp[0].ptr);
  }
#+END_SRC

***** Unsigned Div

syntax: (udiv value1 value2)

#+BEGIN_SRC C 
  LLVMValueRef compile_udiv(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildUDiv(builder,compile_value(sexp[1]),
                                 compile_value(sexp[2]),
                                 (char *)sexp[0].ptr);
  }
#+END_SRC

***** Call

syntax: (call fn arg1 arg2 ...)
fn is a function name or a function pointer

#+BEGIN_SRC C
  LLVMValueRef compile_call(LLVMBuilderRef builder,SExpr* sexp){
      LLVMValueRef fn=compile_value(sexp[1]);
      LLVMValueRef *args=0;
      size_t argn;
      for(argn=0;sexp[argn+2].ptr;argn++);
      args=malloc(argn*sizeof(LLVMValueRef));
      for(size_t i=0;i<argn;i++)
          args[i]=compile_value(sexp[i+2]);
      // using LLVMBuildCall2 to avoid warning
      LLVMValueRef call=LLVMBuildCall2(builder,LLVMGetElementType(LLVMTypeOf(fn)),fn,args,argn,"call");
      free(args);
      return call;
  }
#+END_SRC

***** Store

syntax: (store value ptr)

#+BEGIN_SRC C 
  LLVMValueRef compile_store(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildStore(builder,compile_value(sexp[1]),compile_value(sexp[2]));
  }
#+END_SRC

***** Load

syntax: (load ptr)

#+BEGIN_SRC C
  LLVMValueRef compile_load(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildLoad2(builder,LLVMGetElementType(LLVMTypeOf(compile_value(sexp[1]))),compile_value(sexp[1]),"load");
  }
#+END_SRC

***** Phi

syntax: (phi type (value1 label1) (value2 label2) ...)
type is the type of the phi node

#+BEGIN_SRC C
  LLVMValueRef compile_phi(LLVMBuilderRef builder,SExpr* sexp){
      LLVMTypeRef type=compile_type(sexp[1]);
      LLVMValueRef phi=LLVMBuildPhi(builder,type,"phi");
      size_t argn;
      for(argn=0;sexp[argn+2].ptr;argn++);
      LLVMValueRef *values=malloc(argn*sizeof(LLVMValueRef));
      LLVMBasicBlockRef *labels=malloc(argn*sizeof(LLVMBasicBlockRef));
      for(size_t i=0;i<argn;i++){
          values[i]=compile_value(((SExpr *)(sexp[i+2].ptr))[0]);
          labels[i]=(LLVMBasicBlockRef)compile_value(((SExpr *)(sexp[i+2].ptr))[1]);
      }
      LLVMAddIncoming(phi,values,labels,argn);
      free(values);
      free(labels);
      return phi;
  }
#+END_SRC

***** Cast

syntax: (cast type value)

#+BEGIN_SRC C 
  LLVMValueRef compile_cast(LLVMBuilderRef builder,SExpr* sexp){
      return LLVMBuildBitCast(builder,compile_value(sexp[2]),compile_type(sexp[1]),"cast");
  }
#+END_SRC

***** Define

syntax: (def name value) or (def name (instruction ...))

#+BEGIN_SRC C
  LLVMValueRef compile_assign(LLVMBuilderRef builder,SExpr* sexp){
      LLVMValueRef value;
      if(sexp[2].type==ATOM)
          value=compile_value(sexp[2]);
      else
          value=compile_instr(builder,(SExpr *)(sexp[2].ptr));
      add_var((char *)sexp[1].ptr,value);
      return value;
  }
#+END_SRC

**** Blocks

Syntax: (block name (instruction ...) ...)

#+BEGIN_SRC C 
  void compile_block(LLVMValueRef function,SExpr sexp){
      if(sexp.type==LIST){
          SExpr *list=(SExpr *)sexp.ptr;
          if(atomeq(list[0],"block")){
              LLVMBuilderRef builder=LLVMCreateBuilder();
              LLVMBasicBlockRef block=LLVMAppendBasicBlock(function,(char *)list[1].ptr);
              LLVMPositionBuilderAtEnd(builder,block);
              for(SExpr *i=list+2;i->ptr;i++)
                  compile_instr(builder,(SExpr *)i->ptr);
          }
      }
  }
#+END_SRC

**** Globals

Only functions are implemented for now.
function syntax: (function ((name <return type>) (arg1 <type>) (arg2 <type>) ...) (block ...) ...)

#+BEGIN_SRC C 
  void compile_global(LLVMModuleRef module,SExpr sexp){
      if(sexp.type==LIST){
          SExpr *list=(SExpr *)sexp.ptr;
          if(atomeq(list[0],"function")){
              SExpr *signatures=(SExpr *)list[1].ptr;
              char *name;
              LLVMTypeRef rettype;
              if(signatures[0].type==LIST) {
                  SExpr *namesig = (SExpr *) signatures[0].ptr;
                  name = (char *) namesig[0].ptr;
                  rettype = compile_type(namesig[1]);
              } else{
                  name=(char *)signatures[0].ptr;
                  rettype=LLVMVoidType();
              }
              size_t n_args=0;
              for(SExpr *i=signatures+1;i->ptr;i++)
                  n_args++;
              LLVMTypeRef *argtypes=malloc(n_args*sizeof(LLVMTypeRef));
              for(size_t i=0;i<n_args;i++)
                  argtypes[i]=compile_type(((SExpr *)signatures[i+1].ptr)[1]);
              LLVMTypeRef functype=LLVMFunctionType(rettype,argtypes,n_args,0);
              LLVMValueRef function=LLVMAddFunction(module,name,functype);
              for(size_t i=0;i<n_args;i++){
                  LLVMValueRef arg=LLVMGetParam(function,i);
                  LLVMSetValueName(arg,((char *)(((SExpr *)signatures[i+1].ptr)[0].ptr)));
              }
              for(SExpr *body=list+2;body->ptr;body++)
                  compile_block(function,*body);
              free(argtypes);
          }
      }
  }
#+END_SRC

**** Module

syntax: (module name global ...)
where global is a function or a global variable declarations

#+BEGIN_SRC C
  LLVMModuleRef compile_module(SExpr sexp){
      if(sexp.type==LIST){
          SExpr *list=(SExpr *)sexp.ptr;
          if(atomeq(list[0],"module")){
              LLVMModuleRef module=LLVMModuleCreateWithName((char *)list[1].ptr);
              for(SExpr *i=list+2;i->ptr;i++)
                  compile_global(module,*i);
              return module;
          }
      }
      return 0;
  }
#+END_SRC

*** CLI
:PROPERTIES:
:HEADER-ARGS: :tangle src/cli.c :comments both :exports both :mkdirp yes
:END:

Command line interface only supports dumping the LLVM IR.

#+BEGIN_SRC C
  #include "compiler.c"
  #include "parser.c"

  int cli(int argc,char **argv){
      char *infile=0;
      char *outfile=0;
      int dump=0;
      for(int i=1;i<argc;i++){
          if(!strcmp(argv[i],"-o")){
              outfile=argv[++i];
          }else if(!strcmp(argv[i],"-d")){
              dump=1;
          }else{
              infile=argv[i];
          }
      }
      if(!infile){
          printf("usage: %s [args] <file>\n",argv[0]);
          printf("supported args: \n"
                 "-o <file> : output file\n"
                 "-d : dump llvm ir\n");
          return 1;
      }
      // read file
      FILE *f=fopen(infile,"r");
      if(!f){
          printf("could not open file %s\n",infile);
          return 1;
      }
      fseek(f,0,SEEK_END);
      size_t size=ftell(f);
      fseek(f,0,SEEK_SET);
      char *buf=malloc(size+1);
      fread(buf,1,size,f);
      buf[size]=0;
      fclose(f);
      // parse file
      SExpr sexp=parse(buf);
      free(buf);
      // compile
      LLVMModuleRef module=compile_module(sexp);
      free_sexpr(sexp);
      // dump ir
      if(dump){
          LLVMDumpModule(module);
      }
      // compile to file
      if(outfile){
          char *error=0;
          LLVMVerifyModule(module,LLVMReturnStatusAction,&error);
          if(error && strcmp(error,"")){
              printf("error1: %s\n",error);
              return 1;
          }
          LLVMInitializeNativeTarget();
          LLVMTargetRef target;
          char *triple=LLVMGetDefaultTargetTriple();
          LLVMGetTargetFromTriple(triple,&target,&error);
          if(error && strcmp(error,"")){
              printf("error2: %s\n",error);
              return 1;
          }
          char *cpu=LLVMGetHostCPUName();
          char *features=LLVMGetHostCPUFeatures();
          LLVMTargetMachineRef machine=LLVMCreateTargetMachine(target,triple,cpu,features,LLVMCodeGenLevelDefault,LLVMRelocDefault,LLVMCodeModelDefault);
          LLVMTargetDataRef data=LLVMCreateTargetDataLayout(machine);
          LLVMSetModuleDataLayout(module,data);
          LLVMDisposeTargetData(data);
          LLVMDisposeTargetMachine(machine);
          free(cpu);
          free(features);
          free(triple);
          if(0){
              LLVMInitializeNativeTarget();
              LLVMInitializeNativeAsmPrinter();
              LLVMInitializeNativeAsmParser();
              LLVMExecutionEngineRef engine;
              if(LLVMCreateJITCompilerForModule(&engine,module,0,&error)){
                  printf("error: %s\n",error);
                  return 1;
              }
              LLVMRunFunction(engine,LLVMGetNamedFunction(module,"main"),0,0);
              LLVMDisposeExecutionEngine(engine);
          }else{
              LLVMTargetMachineEmitToFile(machine,module,outfile,LLVMObjectFile,0);
          }
      }
      // cleanup
      LLVMDisposeModule(module);
      free_env();
      return 0;

  }
#+END_SRC

*** main
:PROPERTIES:
:HEADER-ARGS: :tangle src/main.c  :comments both :exports both :mkdirp yes
:END:

#+BEGIN_SRC C
  #include "cli.c"
  int main(int argc,char **argv){
      return cli(argc,argv);
  }
#+END_SRC

** Build

*** CMakeLists.txt

#+BEGIN_SRC sh :tangle CMakeLists.txt :comments both :exports both
  cmake_minimum_required(VERSION 3.4.3)
  
  project(slang)

  find_package(LLVM REQUIRED)

  include_directories(${LLVM_INCLUDE_DIRS})
  add_definitions(${LLVM_DEFINITIONS})

  add_executable(slang src/main.c)

  llvm_map_components_to_libnames(llvm_libs support core irreader executionengine interpreter mc nativecodegen)

  target_link_libraries(slang ${llvm_libs})
#+END_SRC

*** build.sh

#+BEGIN_SRC sh :tangle build/build.sh :mkdirp yes :comments both :exports both :shebang #!/bin/sh
  cmake ..
  make
#+END_SRC

** Tests

some simple .seir files

#+BEGIN_SRC lisp :tangle tests/1.seir
  (module test
    (function ((main <i32>))
        (block entry
            (ret 0))))
#+END_SRC

#+BEGIN_SRC lisp :tangle tests/2.seir
  (module test
    (function ((main <i32>) (argc <i32>) (argv (<ptr> (<ptr> <i8>)))))
        (block entry
            (ret argc)))
#+END_SRC

* License

#+BEGIN_SRC md :tangle LICENSE
MIT License

Copyright (c) 2023 kostdani

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#+END_SRC
